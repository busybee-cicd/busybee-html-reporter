{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Handlebars from 'handlebars';\r\nimport * as fs from 'fs-extra';\r\nimport * as path from 'path';\r\nimport * as _ from 'lodash';\r\nimport * as randomID from 'random-id';\r\nconst jsondiffpatch = require('jsondiffpatch');\r\nconst _jsondiffpatch = jsondiffpatch.create();\r\nconst _jsondiffpatchFormatters = jsondiffpatch.formatters;\r\n\r\nexport class BusybeeHtmlReporter {\r\n\r\n  outputdir: string;\r\n\r\n  constructor(opts: any) {\r\n    this.outputdir = opts.outputdir;\r\n  }\r\n\r\n  run(testSetResults: any) {\r\n    // read the index out first...\r\n    let filenames = fs.readdirSync(path.join(__dirname, 'templates'));\r\n    let templateSrcs: any = {};\r\n    filenames.forEach(f => {\r\n      let name = path.basename(f).replace('.hbs', '');\r\n      templateSrcs[name] = fs.readFileSync(path.join(__dirname, 'templates', f), 'utf8');\r\n    });\r\n\r\n    console.log(JSON.stringify(templateSrcs));\r\n    // 1. save off indexFile while partials are read and registered\r\n    let indexFile = templateSrcs.index;\r\n    delete templateSrcs.index;\r\n\r\n    // 2. register partials\r\n    Object.keys(templateSrcs).forEach(key => {\r\n      Handlebars.registerPartial(key, templateSrcs[key]);\r\n    });\r\n\r\n    // 3. register helpers\r\n    this.registerHelpers();\r\n\r\n    // 4. compile the index template\r\n    let indexTemplate = Handlebars.compile(indexFile);\r\n\r\n\r\n    let html = indexTemplate(this.buildModel(testSetResults));\r\n\r\n    try {\r\n      fs.statSync(this.outputdir);\r\n      fs.rmdir(this.outputdir);\r\n    } catch (e) {\r\n      fs.mkdirSync(this.outputdir);\r\n    }\r\n\r\n    fs.writeFileSync(path.join(this.outputdir, 'index.html'), html);\r\n    fs.copySync(path.join(__dirname, 'assets'), path.join(this.outputdir, 'assets'));\r\n  }\r\n\r\n  buildModel(testSuiteResults: any[]): any {\r\n    // filter out non-REST suites.\r\n\r\n    let restSuites = _.filter(testSuiteResults, ts => { return ts.type === 'REST'; });\r\n\r\n    restSuites.forEach(testSuite => {\r\n      testSuite.htmlID = testSuite.id.replace(/[^a-zA-Z0-9]/g,'');\r\n      testSuite.testSets.forEach(testSet => {\r\n        testSet.htmlID = testSet.id.replace(/[^a-zA-Z0-9]/g,'');\r\n        testSet.tests.forEach(test => {\r\n          test.htmlID = `${testSet.htmlID}${test.id.replace(/[^a-zA-Z0-9]/g,'')}`;\r\n        });\r\n      });\r\n    });\r\n\r\n    return testSuiteResults;\r\n  }\r\n\r\n  registerHelpers() {\r\n    Handlebars.registerHelper('json', (context:any) => {\r\n      return JSON.stringify(context, null, '\\t');\r\n    });\r\n\r\n    Handlebars.registerHelper('diff', context => {\r\n      if (!context.expected) {\r\n        context.expected = \"A custom assertion function was used. Unable to displayed 'expected'\";\r\n      }\r\n\r\n      let delta = _jsondiffpatch.diff(context.expected, context.actual);\r\n      return new Handlebars.SafeString(_jsondiffpatchFormatters.html.format(delta, context.expected));\r\n    });\r\n\r\n    Handlebars.registerHelper('sideBySide', context => {\r\n      let expectedId = randomID(5,\"aA\");\r\n      let actualId = randomID(5,\"aA\");\r\n      let leftHtml = `<div class=\"compare-left col-6\" id=\"${expectedId}\"></div>`;\r\n      let rightHtml = ` <div class=\"compare-right col-6\" id=\"${actualId}\"></div>`;\r\n\r\n      if (!context.expected) {\r\n        leftHtml = `<div class=\"compare-left col-6\">A custom assertion function was used. Unable to displayed 'expected'</div>`;\r\n      } else {\r\n        leftHtml += `\r\n          <script>\r\n            $(function() {\r\n              new PrettyJSON.view.Node({\r\n                el:$('#${expectedId}'),\r\n                data: ${JSON.stringify(context.expected)}\r\n              });\r\n            });\r\n          </script>\r\n        `;\r\n      }\r\n\r\n      rightHtml += `\r\n        <script>\r\n        $(function() {\r\n          new PrettyJSON.view.Node({\r\n            el:$('#${actualId}'),\r\n            data: ${JSON.stringify(context.actual)}\r\n          });\r\n        });\r\n        </script>\r\n      `;\r\n\r\n      let html = `\r\n        <div class=\"row\">\r\n            <div class=\"col-6\"><h4>expected</h4></div>\r\n            <div class=\"col-6\"><h4>actual</h4></div>\r\n        </div>\r\n        <div class=\"row\">\r\n            ${leftHtml}\r\n            ${rightHtml}\r\n        </div>\r\n      `;\r\n\r\n      return new Handlebars.SafeString(html);\r\n    });\r\n  }\r\n\r\n}\r\n"]}